import os
import json
from datetime import datetime
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT

class PDFReportGenerator:
    """Generate PDF reports for security scans"""
    
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
    
    def _setup_custom_styles(self):
        """Setup custom paragraph styles"""
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#1a365d')
        ))
        
        self.styles.add(ParagraphStyle(
            name='CustomHeading',
            parent=self.styles['Heading2'],
            fontSize=14,
            spaceAfter=12,
            textColor=colors.HexColor('#2d3748')
        ))
        
        self.styles.add(ParagraphStyle(
            name='VulnTitle',
            parent=self.styles['Normal'],
            fontSize=12,
            fontName='Helvetica-Bold',
            spaceAfter=6
        ))
    
    def generate_report(self, scan):
        """Generate PDF report for a security scan"""
        # Create reports directory if it doesn't exist
        os.makedirs('reports', exist_ok=True)
        
        filename = f"scan_report_{scan.id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join('reports', filename)
        
        # Create PDF document
        doc = SimpleDocTemplate(filepath, pagesize=A4)
        story = []
        
        # Parse scan results
        results = json.loads(scan.results) if scan.results else {}
        
        # Add header
        self._add_header(story, scan, results)
        
        # Add executive summary
        self._add_executive_summary(story, results)
        
        # Add detailed findings
        if scan.scan_type == 'was':
            self._add_was_findings(story, results)
        else:
            self._add_iac_findings(story, results)
        
        # Add recommendations
        self._add_recommendations(story, scan.scan_type)
        
        # Add footer
        self._add_footer(story)
        
        # Build PDF
        doc.build(story)
        
        return filepath
    
    def _add_header(self, story, scan, results):
        """Add report header"""
        # Title
        title = f"Security Scan Report - {scan.scan_type.upper()}"
        story.append(Paragraph(title, self.styles['CustomTitle']))
        story.append(Spacer(1, 20))
        
        # Scan details table
        scan_data = [
            ['Scan Type:', scan.scan_type.upper()],
            ['Target:', scan.target],
            ['Scan Date:', scan.created_at.strftime('%Y-%m-%d %H:%M:%S')],
            ['Status:', scan.status.title()],
            ['Generated By:', 'CyferTrace Security Platform']
        ]
        
        if scan.completed_at:
            scan_data.append(['Completed:', scan.completed_at.strftime('%Y-%m-%d %H:%M:%S')])
        
        table = Table(scan_data, colWidths=[2*inch, 4*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f7fafc')),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(table)
        story.append(Spacer(1, 20))
    
    def _add_executive_summary(self, story, results):
        """Add executive summary"""
        story.append(Paragraph("Executive Summary", self.styles['CustomHeading']))
        
        summary = results.get('summary', {})
        total = summary.get('total_vulnerabilities', summary.get('total_issues', 0))
        
        if total > 0:
            summary_text = f"""
            This security scan identified {total} potential security issues requiring attention.
            The findings are categorized by severity level to help prioritize remediation efforts.
            """
            
            # Summary table
            summary_data = [
                ['Severity Level', 'Count'],
                ['Critical', str(summary.get('critical', 0))],
                ['High', str(summary.get('high', 0))],
                ['Medium', str(summary.get('medium', 0))],
                ['Low', str(summary.get('low', 0))]
            ]
            
            story.append(Paragraph(summary_text, self.styles['Normal']))
            story.append(Spacer(1, 12))
            
            table = Table(summary_data, colWidths=[3*inch, 1*inch])
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2d3748')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 10)
            ]))
            
            story.append(table)
        else:
            story.append(Paragraph("No security issues were identified in this scan.", self.styles['Normal']))
        
        story.append(Spacer(1, 20))
    
    def _add_was_findings(self, story, results):
        """Add WAS scan findings"""
        story.append(Paragraph("Vulnerability Findings", self.styles['CustomHeading']))
        
        vulnerabilities = results.get('vulnerabilities', [])
        
        for i, vuln in enumerate(vulnerabilities, 1):
            # Vulnerability header
            vuln_title = f"{i}. {vuln.get('name', 'Unknown Vulnerability')}"
            story.append(Paragraph(vuln_title, self.styles['VulnTitle']))
            
            # Vulnerability details
            details = [
                ['Severity:', vuln.get('severity', 'Unknown')],
                ['Risk Level:', vuln.get('risk', 'Unknown')],
                ['Confidence:', vuln.get('confidence', 'Unknown')],
                ['Location:', vuln.get('location', 'Unknown')],
                ['CWE ID:', vuln.get('cwe', 'Not specified')]
            ]
            
            table = Table(details, colWidths=[1.5*inch, 4.5*inch])
            table.setStyle(TableStyle([
                ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.grey)
            ]))
            
            story.append(table)
            story.append(Spacer(1, 6))
            
            # Description
            if vuln.get('description'):
                story.append(Paragraph(f"<b>Description:</b> {vuln['description']}", self.styles['Normal']))
                story.append(Spacer(1, 6))
            
            # Solution
            if vuln.get('solution'):
                story.append(Paragraph(f"<b>Remediation:</b> {vuln['solution']}", self.styles['Normal']))
            
            story.append(Spacer(1, 15))
    
    def _add_iac_findings(self, story, results):
        """Add IaC scan findings"""
        story.append(Paragraph("Configuration Issues", self.styles['CustomHeading']))
        
        issues = results.get('issues', [])
        
        for i, issue in enumerate(issues, 1):
            # Issue header
            issue_title = f"{i}. {issue.get('check_name', 'Configuration Issue')}"
            story.append(Paragraph(issue_title, self.styles['VulnTitle']))
            
            # Issue details
            details = [
                ['Check ID:', issue.get('check_id', 'Unknown')],
                ['Severity:', issue.get('severity', 'Unknown')],
                ['Resource:', issue.get('resource', 'Unknown')],
                ['File Path:', issue.get('file_path', 'Unknown')],
                ['Line Range:', f"{issue.get('line_range', [])}"]
            ]
            
            table = Table(details, colWidths=[1.5*inch, 4.5*inch])
            table.setStyle(TableStyle([
                ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.grey)
            ]))
            
            story.append(table)
            story.append(Spacer(1, 6))
            
            # Description
            if issue.get('description'):
                story.append(Paragraph(f"<b>Description:</b> {issue['description']}", self.styles['Normal']))
                story.append(Spacer(1, 6))
            
            # Remediation
            if issue.get('remediation'):
                story.append(Paragraph(f"<b>Remediation:</b> {issue['remediation']}", self.styles['Normal']))
            
            story.append(Spacer(1, 15))
    
    def _add_recommendations(self, story, scan_type):
        """Add general recommendations"""
        story.append(Paragraph("General Recommendations", self.styles['CustomHeading']))
        
        if scan_type == 'was':
            recommendations = [
                "Implement a Web Application Firewall (WAF) to filter malicious traffic",
                "Conduct regular security testing including SAST and DAST scans",
                "Implement secure coding practices and security code reviews",
                "Keep all frameworks and dependencies updated to latest versions",
                "Implement proper input validation and output encoding",
                "Use Content Security Policy (CSP) headers to prevent XSS attacks",
                "Implement proper session management and authentication controls"
            ]
        else:
            recommendations = [
                "Implement Infrastructure as Code security scanning in CI/CD pipelines",
                "Use policy-as-code to enforce security standards",
                "Regularly review and update security configurations",
                "Implement least privilege access principles",
                "Enable logging and monitoring for infrastructure changes",
                "Use encrypted storage and secure communication protocols",
                "Implement automated compliance checking and reporting"
            ]
        
        for rec in recommendations:
            story.append(Paragraph(f"• {rec}", self.styles['Normal']))
        
        story.append(Spacer(1, 20))
    
    def _add_footer(self, story):
        """Add report footer"""
        story.append(PageBreak())
        
        footer_text = """
        <para align="center">
        <b>This report was generated by the CyferTrace Security Platform</b><br/>
        <br/>
        For questions about this report or our security services, please contact your security team.<br/>
        <br/>
        <i>Made by Team CyferTrace</i><br/>
        <i>Report generated on: %s</i>
        </para>
        """ % datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        story.append(Paragraph(footer_text, self.styles['Normal']))
